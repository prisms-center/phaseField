# =================================================================================
# Set the number of dimensions (2 or 3 for a 2D or 3D calculation)
# =================================================================================
set Number of dimensions = 2

# =================================================================================
# Set the length of the domain in all three dimensions
# (Domain size Z ignored in 2D)
# =================================================================================
# Each axes spans from zero to the specified length
set Domain size X = 1e-4
set Domain size Y = 1e-4
set Domain size Z = 1e-4

# =================================================================================
# Set the element parameters
# =================================================================================
# The number of elements in each direction is 2^(refineFactor) * subdivisions
# Subdivisions Z ignored in 2D
# For optimal performance, use refineFactor primarily to determine the element size
set Subdivisions X = 6
set Subdivisions Y = 6
set Subdivisions Z = 6

set Refine factor = 4

# Set the polynomial degree of the element (allowed values: 1, 2, or 3)
set Element degree = 2

# =================================================================================
# Set the adaptive mesh refinement parameters
# =================================================================================
# Set the flag determining if adaptive meshing is activated
set Mesh adaptivity = false

# Set the maximum and minimum level of refinement
# When adaptive meshing is enabled, the refine factor set in the block above is
# only used to generate the first pass of the mesh as the initial conditions are
# applied. It should be set somewhere between the max and min levels below.
set Max refinement level = 6
set Min refinement level = 3

# Set the number of time steps between remeshing operations
set Steps between remeshing operations = 20

# Set the criteria for adapting the mesh
subsection Refinement criterion: n0
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

subsection Refinement criterion: n1
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

subsection Refinement criterion: n2
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

subsection Refinement criterion: n3
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

subsection Refinement criterion: n4
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

subsection Refinement criterion: n5
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

subsection Refinement criterion: z
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 1e-3
    set Value upper bound = 0.999
end

# Set the criteria for adapting the mesh
subsection Refinement criterion: T
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = GRADIENT
    # Set the lower and upper bounds for the value-based refinement window
    set Gradient magnitude lower bound = 1.0e3
end

# =================================================================================
# Set the time step parameters
# =================================================================================
# The size of the time step
set Time step = 0.01e-6

# The simulation ends when either the number of time steps is reached or the
# simulation time is reached.
set Number of time steps = 10000

# =================================================================================
# Set the output parameters
# =================================================================================
# Type of spacing between outputs ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Output condition = EQUAL_SPACING

# Number of times the program outputs the fields (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of outputs = 200

# The number of time steps between updates being printed to the screen
set Skip print steps = 50

# =================================================================================
# Set the grain reassignment parameters
# =================================================================================

set Activate grain reassignment = true
set Order parameter fields for grain reassignment = n0, n1, n2, n3, n4, n5
set Time steps between grain reassignments = 100
set Order parameter cutoff for grain identification = 1e-2
set Buffer between grains before reassignment = 5.0
set Load grain structure = false

# =================================================================================
# Set the boundary conditions
# =================================================================================
# Set the boundary condition for each variable, where each variable is given by
# its name, as defined in equations.h. The four boundary condition
# types are NATURAL, DIRICHLET, NON_UNIFORM_DIRICHLET and PERIODIC. If all
# of the boundaries have the same boundary condition, only one boundary condition
# type needs to be given. If multiple boundary condition types are needed, give a
# comma-separated list of the types. The order is the miniumum of x, maximum of x,
# minimum of y, maximum of y, minimum of z, maximum of z (i.e left, right, bottom,
# top in 2D and left, right, bottom, top, front, back in 3D). The value of a
# Dirichlet BC is specfied in the following way -- DIRCHILET: val -- where 'val' is
# the desired value. If the boundary condition is NON_UNIFORM_DIRICHLET, the
# boundary condition should be specified in the appropriate function in 'ICs_and_BCs.h'.
# Example 1: All periodic BCs for variable 'c'
# set Boundary condition for variable c = PERIODIC
# Example 2: Zero-derivative BCs on the left and right, Dirichlet BCs with value
# 1.5 on the top and bottom for variable 'n' in 2D
# set Boundary condition for variable n = NATURAL, NATURAL, DIRICHLET: 1.5, DIRICHLET: 1.5

set Boundary condition for variable n0 = NATURAL
set Boundary condition for variable n1 = NATURAL
set Boundary condition for variable n2 = NATURAL
set Boundary condition for variable n3 = NATURAL
set Boundary condition for variable n4 = NATURAL
set Boundary condition for variable n5 = NATURAL

set Boundary condition for variable z = DIRICHLET: 1.0,NATURAL, NATURAL, NATURAL

set Boundary condition for variable T = DIRICHLET: 1720.0,DIRICHLET: 1724.0, NATURAL, NATURAL


# =================================================================================
# Set the model constants
# =================================================================================
# Set the user-defined model constants, which must have a counter-part given in
# customPDE.h. These are most often used in the residual equations in equations.h,
# but may also be used for initial conditions and nucleation calculations. The type
# options currently are DOUBLE, INT, BOOL, TENSOR, and [symmetry] ELASTIC CONSTANTS
# where [symmetry] is ISOTROPIC, TRANSVERSE, ORTHOTROPIC, or ANISOTROPIC.

# The AC mobility, Lg in equations.h
set Model constant Lg = 1.285, DOUBLE

# Gradient energy coefficient
set Model constant Kg = 2.25e-7, DOUBLE

# Grain interaction coeffiecient
set Model constant gamma = 1.5, DOUBLE

# Liquidus Temperature
set Model constant Tliquidus = 1723.0, DOUBLE

# UNSURE OF THIS VALUE
set Model constant Lp = 1.285, DOUBLE
set Model constant Kp = 1.5e-6, DOUBLE

set Model constant theta = 1e6, DOUBLE

set Model constant mp = 1200000, DOUBLE
set Model constant mg = 450000, DOUBLE

set Model constant D = 2.9e-8, DOUBLE
