====================
Version 1.1.1:
===================
Patch to v1.1, released in January 2017. This patch fixes a number of related indexing bugs lurking in previous versions of the code. From a user
perspective, nothing should change (unless you directly hit one of these bugs).

Bug fixes:
- Fixed indexing bug that caused a seg fault if the elliptic equation variable wasn't given last.
- Fixed indexing bug that prevented the use of multiple vector variables.
- Fixed indexing bug that prevented the use of vector variables for parabolic equations.
- Fixed indexing bug that prevented the solution of multiple elliptic equations.

Known issues:
- For some compilers that lack full C++11 support (including the Intel compilers on the Stampede cluster), errors are generated because
  we initialize some vectors with C-style arrays. This will be fixed in the near future.


====================
Version 1.1:
===================
Update to v1.0, released in January 2017. 

Added functionality:
- Periodic boundary conditions are now available. Choose “PERIODIC” as the BC type in the function setBCs() in ICs_and_BCs.h.
- PRISMS-PF now automatically constrains the solution if only periodic/Neumann BCs are used for a component of a variable by pinning 
  the value of that variable to zero at the origin.
- Added more options for controlling the spacing between outputs. Users can now choose between equal spacing, log spacing, and a specified 
  number of outputs per decade or they can input a list of time steps at which to output.
- Added the ability to control how often the progress of a run prints to the screen. Set “skipPrintSteps” in parameters.h.
- Ability to change the output file format between “.vtu” and “.vtk”. Used in the application allenCahn_pfield.
- When mesh adaptivity is turned on, the mesh will adapt before the first time step. 

Changes to the pre-built applications:
- New application: singlePrecipitateKKS is a 3D simulation of 1/8 of a precipitate. Governing equations are similar to precipitateEvolution
  but use the KKS model instead of the WBM model.
- New application: allenCahn_pfield uses the PField capability of PRISMS IntegrationTools to load the initial condition from .vtk files
- New application: precipitateEvolution_pfunction uses the PFunction capability of PRISMS IntegrationTools to load parameters (both 
  and functions) into the code.
- New applications: CHiMaD_benchmark1a and CHiMaD_benchmark2a are phase field benchmark problems for spinodal decomposition and Ostwald
  ripening, respectively. More about the benchmark problems can be found at: https://pages.nist.gov/chimad-phase-field/
- Added formulation files for the CHAC_anisotropy and CHAC_anisotropyRegularized applications.
- Boundary conditions for grainGrowth changed to periodic.
- Boundary condition for the mechanics application changed for higher deformation.
- Moduli changed in precipitateEvolution so that the evolution is dominated by the misfit, not the interfacial energy.

Bug fixes:
- Fixed constraint bug for purely elliptic problems. The solution in the domain was correct, but the boundary value for Dirichlet BCs was
  double what it was supposed to be.
- Removed unnecessary LAPACK check in the CMakeLists.txt files.

Other changes:
- Installation instructions updated, both in the README and in the user guide.
- The “init” function was split into an “init” function and a “reinit” function. The latter is used for reinitializing the system for 
  adaptive meshing.
- Removed call of “norm_sqr”, which no longer exists in deal.II v8.5.

Known issues:
- For some compilers that lack full C++11 support (including the Intel compilers on the Stampede cluster), errors are generated because 
  we initialize some vectors with C-style arrays. This will be fixed in the near future. 
  
====================
Version 1.0:
===================
This is the first release version of PRISMS-PF, released in August 2016. The code has been substantially reworked since version 0.9.3.

Major changes include:
- New user interface
- New user guide
- Mesh adaptivity capability
- Many new applications
- Improved tests, including tests versus analytical results

====================
Version 0.9.3:
====================
Patch to version 0.9.2, released in July 2016. Most changes are specific to coupled Cahn-Hilliard-Allen-Cahn-Mechanics calculations.

Bug fixes:
- Made necessary fixes for compatibility Deal.II v8.4.

Added functionality:
- Support for concentration-dependent stress-free transformation strains for coupled Cahn-Hilliard-Allen-Cahn-Mechanics calculations.
- Support for heterogeneous mechanics for coupled Cahn-Hilliard-Allen-Cahn-Mechanics calculations.
- Option to shift the concentration by a constant value to reach a desired average concentration for coupled 
  Cahn-Hilliard-Allen-Cahn-Mechanics calculations.
- Free energy integrator for coupled Cahn-Hilliard-Allen-Cahn-Mechanics calculations.
- Option to use an absolute tolerance for mechanics calculations.
- New speed comparison test versus a finite difference code for coupled Cahn-Hilliard-Allen-Cahn calculations.
- New application "bPPE_pfunction" that is a mirror of "betaPrimePrecipitateEvolution", but shows how PFunctions from the PRISMS 
  IntegrationTools can be used to input parameters.

Performance improvements:
- Added option for fewer than 3 structural order parameters for coupled Cahn-Hilliard-Allen-Cahn-Mechanics calculations, which can 
  cut run time in half.
- Refactored mechanics functions for coupled Cahn-Hilliard-Allen-Cahn-Mechanics calculations, making use of built-in Deal.II tensor 
  functions. This improves speed and reduces code.

Other changes:
- Restructured input files to separate numerical parameters, ICs/BCs, and the residual equations. This is a stepping stone to a more 
  substantial interface overhaul in the next release.
- Updated/tweaked the example applications to make sure interfaces were well resolved, etc.

Known issues:
- The PFunctions in the application "bPPE_pfunction" can currently only be used for constants. The PFunctions only return doubles and 
  thus cannot be used for functions like the free energy that must be vectorized arrays. This issue is being actively worked on.

====================
Version 0.9.2:
====================
Patch to version 0.9.1, released in January 2016.

Bug fixes:
- In versions 0.9 and 0.9.1, unlike version 0.8, the fields in the calculation were updated sequentially, with the updated value being 
  used for other calculations in that time step (e.g. the concentration is updated using the Cahn-Hilliard equation, then that updated 
  value is used when updating the order parameter via the Allen-Cahn equation). In version 0.8, all of the updates to the fields used 
  the value of the fields from the previous time step. This was the source of the different solutions between the versions. We 
  reverted to the approach taken in version 0.8.

Added functionality:
- A new test suite has been added. The tests can be found in the "tests" directory. Tests include a regression test, testing that the
  solutions exhibit the expected order of accuracy in both time and space, a comparison against a finite difference code, and tests 
  comparing the accuracy of first, second, and third order elements at a range of element sizes.

Performance improvements:
- Refactoring of "computeRHS" has led to a substantial performance increase for solving parabolic equations. Most of the improved 
  performance came from no longer storing field metadata in std::map containers.

Known issues:
- None

====================
Version 0.9.1:
====================
Patch to version 0.9, released in December 2015. This patch fixes a number of bugs that were introduced between versions 0.8 and 0.9. 

Bug fixes:
- Fixed error in strain calculation in getRHS, previously it missed some terms in 3D calculations
- Fixed formatting for output filenames after the 999,999th output
- Fixed a sign error in the residuals in the beta prime precipitate application
- Fixed symmetry error in generation of the stiffness tensor for 2D anisotropic calculations
- Fixed error in the mechanics solver where solution was erroneously set to the change in the solution
- Updated the namespace for MPI calls to comply with Deal.II v8.3 specifications

Added functionality:
- Changed mesh generation to allow for elements with a different aspect ratio than the domain

Known issues:
- Code runs more slowly than version 0.8, possibly due to compiler flags set by Deal.II that are disabling vectorization
- Yields different solutions for time evolution equations than version 0.8

====================
Version 0.9:
====================
Released in September 2015 before the PRISMS Workshop. A large portion of the code was refactored so that much more of the source code is 
shared between applications. In the previous version, each application was nearly independent. 

Known issues:
- Code runs more slowly than version 0.8, possibly due to compiler flags set by Deal.II that are disabling vectorization
- Yields different solutions for time evolution equations than version 0.8

====================
Version 0.8:
====================
First public release of the code.
